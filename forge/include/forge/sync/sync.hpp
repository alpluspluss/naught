/* this file is a part of Naught Engine which is under MIT license; see LICENSE for more info */

#pragma once

#include <vulkan/vulkan.h>

namespace frg
{
	/* common synchronization-related enums and utilities */
	enum class PipelineStage
	{
		TOP = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
		DRAW_INDIRECT = VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
		VERTEX_INPUT = VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
		VERTEX_SHADER = VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
		FRAGMENT_SHADER = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
		EARLY_FRAGMENT_TESTS = VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
		LATE_FRAGMENT_TESTS = VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
		COLOR_ATTACHMENT_OUTPUT = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
		COMPUTE_SHADER = VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
		TRANSFER = VK_PIPELINE_STAGE_TRANSFER_BIT,
		BOTTOM = VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
		HOST = VK_PIPELINE_STAGE_HOST_BIT,
		ALL_GRAPHICS = VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
		ALL_COMMANDS = VK_PIPELINE_STAGE_ALL_COMMANDS_BIT
	};

	enum class AccessFlag
	{
		NONE = 0,
		INDIRECT_COMMAND_READ = VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
		INDEX_READ = VK_ACCESS_INDEX_READ_BIT,
		VERTEX_ATTRIBUTE_READ = VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
		UNIFORM_READ = VK_ACCESS_UNIFORM_READ_BIT,
		INPUT_ATTACHMENT_READ = VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
		SHADER_READ = VK_ACCESS_SHADER_READ_BIT,
		SHADER_WRITE = VK_ACCESS_SHADER_WRITE_BIT,
		COLOR_ATTACHMENT_READ = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
		COLOR_ATTACHMENT_WRITE = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
		DEPTH_STENCIL_ATTACHMENT_READ = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
		DEPTH_STENCIL_ATTACHMENT_WRITE = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
		TRANSFER_READ = VK_ACCESS_TRANSFER_READ_BIT,
		TRANSFER_WRITE = VK_ACCESS_TRANSFER_WRITE_BIT,
		HOST_READ = VK_ACCESS_HOST_READ_BIT,
		HOST_WRITE = VK_ACCESS_HOST_WRITE_BIT,
		MEMORY_READ = VK_ACCESS_MEMORY_READ_BIT,
		MEMORY_WRITE = VK_ACCESS_MEMORY_WRITE_BIT
	};

	/* bitwise operators for AccessFlag */
	inline AccessFlag operator|(AccessFlag a, AccessFlag b)
	{
		return static_cast<AccessFlag>(
			static_cast<VkAccessFlags>(a) | static_cast<VkAccessFlags>(b)
		);
	}

	inline AccessFlag& operator|=(AccessFlag& a, AccessFlag b)
	{
		a = a | b;
		return a;
	}

	/* helper function for stage flags */
	inline VkPipelineStageFlags to_vk_pipeline_stage(PipelineStage stage)
	{
		return static_cast<VkPipelineStageFlags>(stage);
	}

	/* helper function for access flags */
	inline VkAccessFlags to_vk_access_flags(AccessFlag flags)
	{
		return static_cast<VkAccessFlags>(flags);
	}
}